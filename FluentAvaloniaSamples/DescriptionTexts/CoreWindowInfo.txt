A special window style designed to mock the modern UWP/WinUI style window. This style forces DwmExtendFrameToClientArea (do not modify these properties on the Window object if you use a CoreWindow) and a uses a custom Xaml defined titlebar, which you'll notice retains its size when the window is maximized.

You'll also notice, that despite the frame extending into the client area, the window resize handles remain outside the window over the drop shadow like normal windows. Some special hacks in WM_NCCALCSIZE handling allow this. These hacks, however, also mean the system border on the window is visible an cannot be removed.

On Windows 11, despite using a custom titlebar, the snap window flyout that appears on hovering the maximize button works.

Not using windows? No problem, the CoreWindow class automatically falls back to a normal window object on non-Windows systems.

To use, inherit any window objects you want from CoreWindow instead of Window. 

Customization:
I've adapted the WinUI/UWP API for customizing titlebars here, using ApplicationViewTitleBar and CoreApplicationViewTitleBar classes.

Use the CoreApplicationViewTitleBar class to "extend" the area into the titlebar region. The CoreApplicationViewTitleBar class is available by casting a CoreWindow object to ICoreApplicationView:

var coreAppTitleBar = myCoreWindowInstance as ICoreApplicationView;

**Note that this will return null on non-Windows systems

CoreApplicationViewTitleBar has the following properties:

ExtendViewIntoTitleBar - Gets or sets a value on whether or not the window contents extend into the title bar region.
Height - Gets the height of the titlebar (at least right now, this should just return the system height)
IsVisible - Gets a value whether the titlebar is visible. Always returns true. A TODO is to make it false if view is extended
SystemOverlayLeftInset - Always 0, since Avalonia currently doesn't have support for RTL layouts
SystemOverlayRightInset - Always returns 138, The total width of the caption buttons. This may or may not be correct on high DPI screens, still need to test that.


To customize the colors of the titlebar and caption buttons, use the ApplicationViewTitleBar class - do not attempt to modify the styles for CoreWindow.

This class is shared among all windows so to get a reference:

ApplicationViewTitleBar.Instance

You can then modify the colors as needed. To restore the default, set the color to null. The default values will match the theme specified in FluentAvaloniaTheme. Custom colors should be tested to ensure proper accessibility and contrast. 

What if I want to set my own custom titlebar?

You can do that too! Call the SetTitleBar(IControl titleBar) method on your CoreWindow object and pass in the control you'd like to function as your custom titlebar. Passing null should restore back to the default.

Custom titlebar controls define the drag rect for dragging the window and should be properly hit testable. 

Things that still need some work:
High dpi (not sure if everything fully respects this yet)
When using a custom titlebar:
1) In WinUI/UWP, the default titlebar drag rect is still partially visible and aligned against the caption buttons so there is always a region to drag the window. Need to make sure this is properly working
2) How hit testing a custom titlebar works when there are controls that can be interacted with are present. I believe, right now the initial hit test takes precedence and those controls won't work.

The v1.2 update will feature a new, refreshed sample app with a demo of using the CoreWindow class where the above will get worked out, and give you a better idea how to implement this (I just didn't want to set everything up now, only to change it later).